{
  "contract_name": "btsg-zktls",
  "contract_version": "0.2.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "owner"
    ],
    "properties": {
      "owner": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "add_epoch"
        ],
        "properties": {
          "add_epoch": {
            "type": "object",
            "required": [
              "minimum_witness",
              "witness"
            ],
            "properties": {
              "minimum_witness": {
                "$ref": "#/definitions/Uint128"
              },
              "witness": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Witness"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Witness": {
        "type": "object",
        "required": [
          "address",
          "host"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "host": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_all_epoch"
        ],
        "properties": {
          "get_all_epoch": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_epoch"
        ],
        "properties": {
          "get_epoch": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_all_epoch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetAllEpochResponse",
      "type": "object",
      "required": [
        "ids"
      ],
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "get_epoch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetEpochResponse",
      "type": "object",
      "required": [
        "epoch"
      ],
      "properties": {
        "epoch": {
          "$ref": "#/definitions/Epoch"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Epoch": {
          "type": "object",
          "required": [
            "id",
            "minimum_witness_for_claim_creation",
            "timestamp_end",
            "timestamp_start",
            "witness"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/Uint128"
            },
            "minimum_witness_for_claim_creation": {
              "$ref": "#/definitions/Uint128"
            },
            "timestamp_end": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "timestamp_start": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "witness": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Witness"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Witness": {
          "type": "object",
          "required": [
            "address",
            "host"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "host": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
